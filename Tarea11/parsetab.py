
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMASMENOSleftPORDIVIDIDODECIMAL DIVIDIDO ENTERO MAS MENOS PARA PARC POR PYCinstruccion : expresionexpresion : expresion MAS expresion\n                  | expresion MENOS expresion\n                  | expresion POR expresion\n                  | expresion DIVIDIDO expresionexpresion : PARA expresion PARCexpresion    : ENTERO\n                    | DECIMAL'
    
_lr_action_items = {'PARA':([0,3,6,7,8,9,],[3,3,3,3,3,3,]),'ENTERO':([0,3,6,7,8,9,],[4,4,4,4,4,4,]),'DECIMAL':([0,3,6,7,8,9,],[5,5,5,5,5,5,]),'$end':([1,2,4,5,11,12,13,14,15,],[0,-1,-7,-8,-2,-3,-4,-5,-6,]),'MAS':([2,4,5,10,11,12,13,14,15,],[6,-7,-8,6,-2,-3,-4,-5,-6,]),'MENOS':([2,4,5,10,11,12,13,14,15,],[7,-7,-8,7,-2,-3,-4,-5,-6,]),'POR':([2,4,5,10,11,12,13,14,15,],[8,-7,-8,8,8,8,-4,-5,-6,]),'DIVIDIDO':([2,4,5,10,11,12,13,14,15,],[9,-7,-8,9,9,9,-4,-5,-6,]),'PARC':([4,5,10,11,12,13,14,15,],[-7,-8,15,-2,-3,-4,-5,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instruccion':([0,],[1,]),'expresion':([0,3,6,7,8,9,],[2,10,11,12,13,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instruccion","S'",1,None,None,None),
  ('instruccion -> expresion','instruccion',1,'p_instrucciones_evaluar','gramatica.py',69),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_binaria','gramatica.py',73),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_binaria','gramatica.py',74),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_binaria','gramatica.py',75),
  ('expresion -> expresion DIVIDIDO expresion','expresion',3,'p_expresion_binaria','gramatica.py',76),
  ('expresion -> PARA expresion PARC','expresion',3,'p_expresion_agrupacion','gramatica.py',83),
  ('expresion -> ENTERO','expresion',1,'p_expresion_number','gramatica.py',87),
  ('expresion -> DECIMAL','expresion',1,'p_expresion_number','gramatica.py',88),
]
